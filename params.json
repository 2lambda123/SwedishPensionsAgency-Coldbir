{"name":"Coldbir","tagline":"Column database in R","body":"Coldbir is a column database in R. The main purpose of this package is to simplify the workflow with panel data on disk, including features such as:\r\n\r\n- Simple syntax to work with data\r\n- Small storage size\r\n- Impressive read and write speed\r\n- Variable documentation\r\n- Support for various data types\r\n\r\n## Getting started\r\n\r\nThe package is currently not available on `CRAN`, therefore make sure to use `devtools` when installing the package:\r\n\r\n    devtools::install_github('SwedishPensionsAgency/Coldbir')\r\n\r\nThen, to access or create a database, one has to first initialize a connection:\r\n\r\n    library(Coldbir)\r\n    a <- cdb('mydb')\r\n    \r\nThe package make use of *get* and *put* methods to read and write data, somewhat simplified the syntax is `a[] <- x` to put some data (`x`) on to the disk and then `a[]` to read the same data from disk. The `[]` notation is used for data selection, e.g. to define which variable and dimensions to read, see the API section for more details.\r\n\r\n## Introduction\r\n\r\nThe Coldbir database could be seen as a large table including a lot of columns. The data itself is stored as a [column-oriented DBMS](http://en.wikipedia.org/wiki/Column-oriented_DBMS), where each individual column, also called `variable`, has its own folder including data, documentation and lookup files. A variable data could also be divided into different dimensions (e.g. months and years), hence making it possible to store time series data. *As a notation, this feature could also be used to improve read performance by pre-aggreggating values into years, when data is originally divided into months.*\r\n\r\nBelow is an example of a database, named *mydb*, including variables on `income` and `unemployment` and year-month as dimensions:\r\n\r\n    mydb/\r\n      income/\r\n        data/\r\n          d[2012][12].cdb.gz\r\n          d[2013][12].cdb.gz\r\n        documentation.json\r\n        lookup.txt\r\n      unemployment/\r\n        data/\r\n          d[2012][12].cdb.gz\r\n          d[2013][12].cdb.gz\r\n        documentation.json\r\n        lookup.txt\r\n\r\nThe database stores a config file to keep track of variable length, when it was lastly changed (database version) and some additional database specific options. Also worth to mention, when initalizing a new database connection it read the config file and create an in-memory list representation of all variables and dimensions available within the database. This causes the inital connection to be a bit slow, but allows much faster queries.\r\n\r\n### Variable documentation\r\n\r\nAn additional feature is to add documentation to a variable. This is simply done by first creating an object of the `doc` class and then assign it to a variable:\r\n\r\n    a['foo'] <- doc(\r\n      'Foo' = 'This is a variable', \r\n      'Info' = list(\r\n        'Stats' = paste('The minimum value is', min(1:10)),\r\n        'Source' = \"Some db\"\r\n      )\r\n    )\r\n\r\nAs one may notice, the doc object is build up as a list, which makes it simple to include variable statistics that updates when running the above code. Then, to use the documentation:\r\n\r\n    d <- a$get_doc(\"foo\")\r\n    d$Info$Stats\r\n    # [1] \"The minimum value is 1\"\r\n\r\n### Supported data types\r\n\r\nThe package currently support the following data types:\r\n\r\n- `integer`\r\n- `double`\r\n- `logical`\r\n- `factor`\r\n- `Date`\r\n- `POSIXct` / `POSIXlt`\r\n\r\nTimezones are not supported. All timestamps are written as `GMT` without timezone conversion. E.g. `2013-04-29 01:00:00 CST` is stored (and returned) as `2013-04-29 01:00:00 GMT`. `POSIXlt` is automatically converted to `POSIXct`.\r\n\r\n## API\r\n\r\n### General\r\n\r\nMethod                                  | Example\r\n--------------------------------------- | -------------\r\nInitialize database                     | `a <- cdb('mydb')`\r\nSet read only                           | `a$read_only <- T`\r\nGet database path                       | `a$path`\r\nList all variables                      | `a$variables`\r\n\r\n### Put\r\n\r\nMethod                                  | Example\r\n--------------------------------------- | -------------\r\nPut variable                            | `a['foo'] <- 1:10`\r\nPut variable with dimension             | `a['foo', 2013] <- 1:10`\r\nPut variable with multiple dimensions   | `a['foo', c(2013, 12)] <- 1:10`\r\nPut data.frame                          | `a[] <- MASS::survey`\r\nPut data.frame with dimensions          | `a[, c(2013, 12)] <- MASS::survey`\r\nPut variable documentation              | `a['foo'] <- doc(title = \"Foo\", desc = \"Bar\")`\r\nPut variable documentation (list)       | `a['foo'] <- doc(list(title = \"Foo\"))`\r\nPut config file                         | `a$put_config()`\r\n\r\n### Get\r\n\r\nMethod                                  | Example\r\n--------------------------------------- | -------------\r\nGet variable without dimensions         | `a['foo']`\r\nGet variable with all dimensions        | `a['foo', .all]`\r\nGet variable with dimensionality of two | `a['foo', c(._, ._)]`\r\nGet variable with specified dimensions (*e.g. december for all years*) | `a['foo', c(._, 12)]`\r\nGet multiple variables                  | `a[c('foo', 'bar')]`\r\nGet all data                            | `a[]`\r\nGet variable documentation              | `a$get_doc(\"foo\")`\r\n\r\n### Delete\r\n\r\nMethod                                  | Example\r\n--------------------------------------- | -------------\r\nDelete variable                         | `a['foo'] <- NULL`\r\nDelete specific dimension               | `a['foo', c(2013, 12)] <- NULL`\r\nDelete all database content             | `a[] <- NULL`, alt. `a$clean()`\r\n\r\nThe documentation object has its own class `doc` and is constructed as a list.\r\n\r\n## Development\r\n\r\n### Git branches\r\n\r\nThe *dev* branch is the development branch, and might therefore be a bit unstable. *master* is the latest stable version and larger releases are marked with tags, e.g. v1.0, where the first number represents a new stable release and the second number imply new bug fixes within the given release version.\r\n\r\n### Build package and run tests\r\n\r\nUse the `makefile` to run tests and to build the package:\r\n\r\n- `make build`: to build the package\r\n- `make install`: to build and install the package\r\n- `make check`: to build and check (cran requirements) the package\r\n- `make test`: to run the package tests\r\n\r\nThe `testthat` package is required to run the package tests and the related test code is available in `inst/tests/testthat/`. The build/test structure of this package takes a lot of inspiration from the [pander](https://github.com/Rapporter/pander) package - many thanks to its developers!\r\n\r\n## See also\r\n\r\n- [bigmemory](http://www.bigmemory.org/)\r\n- [ff](http://ff.r-forge.r-project.org/)\r\n\r\n## License\r\n\r\nColdbir is licensed under the AGPL-3, for more information on the license please read: [http://www.r-project.org/Licenses/AGPL-3](http://www.r-project.org/Licenses/AGPL-3).","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}