{"tagline":"(keep it simple stupid) column database in R","note":"Don't delete this file! It's used internally to help with page regeneration.","google":"","name":"coldbir","body":"## Installation\r\n\r\nUse `devtools` for easy installation\r\n\r\n    # install.packages(\"devtools\")\r\n    devtools:::install_github('coldbir', 'mikula')\r\n    library(coldbir)\r\n\r\n## Introduction\r\n\r\n### Database\r\nThe coldbir database consists of folders where each folder represent a variable. Each variable may have several dimensions, e.g. months and years. The data is stored as a [column-oriented DBMS](http://en.wikipedia.org/wiki/Column-oriented_DBMS). Below is an example of a database, named *mydb*, with a couple of variables:\r\n\r\n```\r\nmydb/\r\n  income/\r\n    data/\r\n      income[2011].cdb.gz\r\n      income[2012].cdb.gz\r\n    LOOKUP.txt\r\n    README.md\r\n  unemployment/\r\n    data/\r\n      unemployment[2011].cdb.gz\r\n      unemployment[2012].cdb.gz\r\n    LOOKUP.txt\r\n    README.md\r\n```\r\n\r\n## Examples\r\n\r\nTo simplify the explanation we will introduce with another example. We will use the *survey* dataset from the `MASS` package. First, load the necessary packages\r\n\r\n```{r}\r\nlibrary(coldbir)\r\nlibrary(MASS)\r\n```\r\n\r\nThen, we could simply write one specific variable to cdb file format with `put_v(survey$Exer, \"exercise\", \"survey\")`, but we will instead convert the whole dataset at once:\r\n\r\n```{r}\r\nput_db(survey, \"survey\")\r\n# Files were successfully written to disk\r\n# [1] TRUE\r\n```\r\n\r\nTo read a variable from disk, one simply type `variable <- get_v(\"m.i\", \"survey\")`, or\r\n\r\n```{r}\r\nsetwd(\"survey\")\r\nhead(get_v(\"m.i\"))\r\n# [1]  2  1 NA  2  2  1\r\n```\r\n\r\nwhere we now changed our working directory to our *survey* database path. It is also possible to save a dictionary explaining what the keys in the data represents, for example:\r\n\r\n```{r}\r\ndf <- data.frame(key = c(1, 2), value = c(\"Imperial\", \"Metric\"))\r\n\r\nput_dict(df, \"m.i\")\r\n# Dictionary was successfully written to disk\r\n# [1] TRUE\r\n\r\nget_dict(\"m.i\")\r\n#   key    value\r\n# 1   1 Imperial\r\n# 2   2   Metric\r\n\r\nv <- get_v(\"m.i\")\r\nv <- to_values(v, \"m.i\")\r\nhead(v)\r\n# [1] \"Metric\"   \"Imperial\" NA         \"Metric\"   \"Metric\"   \"Imperial\"\r\n```\r\n"}